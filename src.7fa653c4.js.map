{"version":3,"sources":["index.js"],"names":["CountdownTimer","constructor","selector","date","onTick","targetDate","Date","clockIdx","getTimeLeft","intervalId","setInterval","currentTime","now","deltaTime","days","hours","mins","secs","getTimeComponents","addClockAnimation","clockEls","doNext","bind","pad","value","String","padStart","time","Math","floor","arr","cb","tripTimer","updateClockFace","bdRefs","timer","document","querySelector","timeValues","querySelectorAll","textContent","classList","toggle","length"],"mappings":";AAgCA,MAAMA,EACFC,YAAYC,EAAUC,EAAMC,GACrBF,KAAAA,SAAWA,EACXG,KAAAA,WAAa,IAAIC,KAAKH,GACtBC,KAAAA,OAASA,EACTG,KAAAA,SAAW,EAGlBC,cACOC,KAAAA,WAAaC,YAAY,KACtBC,MAAAA,EAAcL,KAAKM,MAEnBC,EAAY,KAAKR,WAAaM,GAC9B,KAAEG,EAAF,MAAQC,EAAR,KAAeC,EAAf,KAAqBC,GAAS,KAAKC,kBAAkBL,GAEtDT,KAAAA,OAAO,CAAEU,KAAAA,EAAMC,MAAAA,EAAOC,KAAAA,EAAMC,KAAAA,IAE5BE,KAAAA,kBAAkBC,EAAUC,EAAOC,KAAK,QAC5C,KAGLC,IAAIC,GACKC,OAAAA,OAAOD,GAAOE,SAAS,EAAG,KAGnCR,kBAAkBS,GAQT,MAAA,CAAEb,KAPI,KAAKS,IAAIK,KAAKC,MAAMF,EAAQ,QAO1BZ,MAND,KAAKQ,IACjBK,KAAKC,MAAOF,EAAQ,MAAyB,OAKzBX,KAHT,KAAKO,IAAIK,KAAKC,MAAOF,EAAQ,KAAoB,MAGlCV,KAFf,KAAKM,IAAIK,KAAKC,MAAOF,EAAQ,IAAc,OAK1DR,kBAAkBW,EAAKC,GACrBA,EAAGD,IAIP,MAAME,EAAY,IAAIhC,EACpB,WACA,eACAiC,GAGIC,EAAS,CACbC,MAAOC,SAASC,cAAcL,EAAU9B,UAExCY,KAAMsB,SAASC,cAAc,uBAC7BtB,MAAOqB,SAASC,cAAc,wBAC9BrB,KAAMoB,SAASC,cAAc,uBAC7BpB,KAAMmB,SAASC,cAAc,wBAEzBC,EAAaJ,EAAOC,MAAMI,iBAAiB,oBAEjD,SAASN,GAAgB,KAAEnB,EAAF,MAAQC,EAAR,KAAeC,EAAf,KAAqBC,IAC5CiB,EAAOpB,KAAK0B,YAAc1B,EAC1BoB,EAAOnB,MAAMyB,YAAczB,EAC3BmB,EAAOlB,KAAKwB,YAAcxB,EAC1BkB,EAAOjB,KAAKuB,YAAcvB,EAG5Be,EAAUxB,cAGV,MAAMY,EAAWgB,SAASG,iBAAiB,aAE3C,SAASlB,EAAOS,GACdA,EAAI,KAAKvB,UAAUkC,UAAUC,OAAO,WAC/BnC,KAAAA,UAAY,EAEb,KAAKA,SAAWuB,EAAIa,SAEjBpC,KAAAA,SAAW","file":"src.7fa653c4.js","sourceRoot":"../src","sourcesContent":["// new CountdownTimer({\n//     selector: '#timer-1',\n//     targetDate: new Date('Jul 17, 2019'),\n//   });\n\n  /*\n * Оставшиеся дни: делим значение UTC на 1000 * 60 * 60 * 24, количество\n * миллисекунд в одном дне (миллисекунды * секунды * минуты * часы)\n */\n// const days = Math.floor(time / (1000 * 60 * 60 * 24));\n\n/*\n * Оставшиеся часы: получаем остаток от предыдущего расчета с помощью оператора\n * остатка % и делим его на количество миллисекунд в одном часе\n * (1000 * 60 * 60 = миллисекунды * минуты * секунды)\n */\n// const hours = Math.floor((time % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));\n\n/*\n * Оставшиеся минуты: получаем оставшиеся минуты и делим их на количество\n * миллисекунд в одной минуте (1000 * 60 = миллисекунды * секунды)\n */\n// const mins = Math.floor((time % (1000 * 60 * 60)) / (1000 * 60));\n\n/*\n * Оставшиеся секунды: получаем оставшиеся секунды и делим их на количество\n * миллисекунд в одной секунде (1000)\n */\n// const secs = Math.floor((time % (1000 * 60)) / 1000);\n\n\n\nclass CountdownTimer {\n    constructor(selector, date, onTick) {\n      this.selector = selector;\n      this.targetDate = new Date(date);\n      this.onTick = onTick;\n      this.clockIdx = 0;\n    }\n  \n    getTimeLeft() {\n      this.intervalId = setInterval(() => {\n        const currentTime = Date.now();\n  \n        const deltaTime = this.targetDate - currentTime;\n        const { days, hours, mins, secs } = this.getTimeComponents(deltaTime);\n  \n        this.onTick({ days, hours, mins, secs });\n  \n        this.addClockAnimation(clockEls, doNext.bind(this));\n      }, 1000);\n    }\n  \n    pad(value) {\n      return String(value).padStart(2, '0');\n    }\n  \n    getTimeComponents(time) {\n      const days = this.pad(Math.floor(time / (1000 * 60 * 60 * 24)));\n      const hours = this.pad(\n        Math.floor((time % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60)),\n      );\n      const mins = this.pad(Math.floor((time % (1000 * 60 * 60)) / (1000 * 60)));\n      const secs = this.pad(Math.floor((time % (1000 * 60)) / 1000));\n  \n      return { days, hours, mins, secs };\n    }\n  \n    addClockAnimation(arr, cb) {\n      cb(arr);\n    }\n  }\n  \n  const tripTimer = new CountdownTimer(\n    '#timer-1',\n    'Nov 22, 2021',\n    updateClockFace,\n  );\n  \n  const bdRefs = {\n    timer: document.querySelector(tripTimer.selector),\n  \n    days: document.querySelector('[data-value=\"days\"]'),\n    hours: document.querySelector('[data-value=\"hours\"]'),\n    mins: document.querySelector('[data-value=\"mins\"]'),\n    secs: document.querySelector('[data-value=\"secs\"]'),\n  };\n  const timeValues = bdRefs.timer.querySelectorAll('span[data-value]');\n  \n  function updateClockFace({ days, hours, mins, secs }) {\n    bdRefs.days.textContent = days;\n    bdRefs.hours.textContent = hours;\n    bdRefs.mins.textContent = mins;\n    bdRefs.secs.textContent = secs;\n  }\n  \n  tripTimer.getTimeLeft();\n  \n  // Decorative clock\n  const clockEls = document.querySelectorAll('.clock-el');\n  \n  function doNext(arr) {\n    arr[this.clockIdx].classList.toggle('animate');\n    this.clockIdx += 1;\n  \n    if (this.clockIdx < arr.length) {\n    } else {\n      this.clockIdx = 0;\n    }\n  }"]}